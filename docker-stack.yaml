version: '3.7'

services:
  prometheus:
    image: prom/prometheus:v3.4.1
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: host
    networks:
      - prom_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.01"
          memory: 512M

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - target: 9100
        published: 9100
        protocol: tcp
        mode: host
    networks:
      - prom_network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 512M

  alertmanager:
    image: prom/alertmanager
    ports:
      - target: 9093
        published: 9093
        protocol: tcp
        mode: host
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yaml'
      - '--storage.path=/alertmanager'
    networks:
      - prom_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 512M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    networks:
      - prom_network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.01"
          memory: 512M

  grafana:
    image: grafana/grafana:12.0.2
    user: "472"
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - prom_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.2"
          memory: 512M

  loki:
    image: grafana/loki:3.5.1
    ports:
      - target: 3100
        published: 3100
        protocol: tcp
        mode: host
    volumes:
      - ./loki/:/etc/loki/
    command:
      - '--config.file=/etc/loki/local-config.yaml'
    networks:
      - prom_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 512M

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail/config.yaml:/etc/promtail/config.yaml
      # - /opt/applogs/live_logs:/opt/scripts/live_logs:ro
    command:
      - '--config.file=/etc/promtail/config.yaml'
      - '--config.expand-env=true'
    networks:
      - prom_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 512M

#  pushgateway:
#    image: prom/pushgateway
#    ports:
#      - 9091:9091
#    networks:
#      - prom_network
#    deploy:
#      restart_policy:
#        condition: on-failure

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  prom_network:
